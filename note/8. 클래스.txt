 ① class: 객체를 생성하기 위한 설계도, 객체는 클래스로부터 나옴
 ② new : 객체 생성 연산자로 객체의 주소를 return, 뒤에는 클래스명(); 형태를 가지는 생성자 호출 코드가 옴. 생성자를 호출하면 객체가 초기화된다
 ③ 객체는 null, 숫자는 0, boolean은 false로 초기화
 ④ 객체 생성 예시:  Car myCar = new Car();
 ⑤ 클래스의 구성: 생성자, 데이터, 메소드
 ⑥ 데이터(속성, 인스턴스 변수): 객체의 데이터를 저장. 선언 형태가 변수 선언과 비슷하지만 쓰임새는 다름
 ⑦ 생성자(Constructor): new로 객체를 생성할 때 객체를 초기화하는 역할, 리턴type이 없고 클래스명과 같게 해야 함. 
 ⑧ 만약 생성자를 만들지 않는다면  JVM이 내부적으로 default 생성자를 자동으로 생성
 ⑨ 생성자 함수도 overloading 가능
      [Rect.java]
      public Rect( ) { }             // default 생성자
      public Rect(int side) {   // 매개변수 1개인 생성자
      	width  = side;
	height = side;
      }
      public Rect(int width, int height) {  // 매개변수 2개인 생성자
	 // this. → 인스턴스 변수와 매개변수의 이름이 같을 때 구분하기 위해 사용
      	this.width = width; 
	this.width = height; 
      }
 ⑩ 메소드: 객체가 수행할 동작, 다른 언어에서는 함수라고도 하는데 객체 내부의 함수는 메소드라고 부름.
 ⑪ Getter와 Setter: 객체의 데이터는 외부에서 변경할 수 없도록 직접적인 접근을 막아놓음. 이때 간접적으로 데이터에 접근할 수 있게 하는 메소드 
 ⑫ 데이터 읽기 getSpeed(), 데이터 변경 setSpeed()